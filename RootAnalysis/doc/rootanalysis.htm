<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>RootAnalysis</title>
</head>

<body>

<div align="center">
  <center>
  <table border="0" cellpadding="0" cellspacing="8" width="98%">
    <tr>
      <td align="right" valign="top" width="20%">&nbsp;</td>
      <td width="15"></td>
      <td valign="bottom" width="80%"><font size="5">RootAnalysis</font></td>
    </tr>
    <tr>
      <td valign="top" width="20%"><font size="2"><strong><a href="#Introduction">Introduction</a></strong></font>
        <p><font size="2"><strong><a href="#Setup">Setup</a></strong></font></p>
        <p><font size="2"><strong><a href="#Low level macros">Low Level Utilties</a></strong></font><font size="4"><br>
        </font><font size="2"><a href="#chainTrees">chainTrees.cxx<br>
        </a><a href="#createEventList.cxx">createEventList.cxx</a><br>
        <a href="#pruneTree.cxx">pruneTree.cxx</a></font></p>
        <p><font size="2">
        <a href="#plotMacros"><b>plotMacros<br>
        </b></a><a href="#HistBatch.h">HistBatch</a></font></p>
        <p><font size="2"><strong><a href="#Event Loop processing">Event Loop
        Processing</a></strong></font><font size="3"><br>
        </font><font size="2"><a href="#RootTreeAnalysis">RootTreeAnalysis</a><br>
        <a href="#RawValidate">RawValidate<br>
        </a><a href="#NtupleAnalysis">NtupleAnalysis</a></font></p>
        <p><font size="2"><strong><a href="#Ancillary Data files">Ancillary Data
        files</a><br>
        </strong><a href="#Calibration">Calibration</a></font>
        <p>&nbsp;</td>
      <td width="15"></td>
      <td valign="top" width="80%">
        <h3><a name="Introduction">Introduction</a></h3>
        <p><font size="3">This package contains all GLAST ROOT macros that are
        supported by the GLAST ground software group.&nbsp; The routines
        provided, are meant to provide some basic, general, functions that most
        GLAST ROOT users may find useful.&nbsp; To process GLAST ROOT data,
        it is not necessary to use this package, but it may make it easier.</font></p>
        <h3><font size="3"><a name="Setup">Setup the ROOT environment for GLAST</a></font></h3>
        <p><font size="3">RootAnalysis now comes with a simple .rootrc.&nbsp;
        This is the file used by ROOT to setup your ROOT environment upon
        startup.&nbsp;&nbsp;</font></p>
        <p><font size="3"> First, setup a <b> ROOTANALYSIS</b> environment variable that is
        set to the directory path, where you have the RootAnalysis package
        installed.&nbsp;</font></p>
        <p><font size="3">On UNIX:&nbsp; setenv ROOTANALYSIS $HOME/RootAnalysis</font></p>
        <p><font size="3">On Windows:&nbsp;</font></p>
        <ol>
          <li><font size="3">In Control Panel, Click on System,&nbsp;</font></li>
          <li><font size="3">Then Click on the Environment tab</font></li>
          <li><font size="3">Then define a new variable called ROOTANALYSIS<br>
            Set its value equal to the RootAnalysis directory on your system,
            i.e. D:/glast/RootAnalysis</font></li>
        </ol>
        <p><font size="3">To be used, the .rootrc file must be in the directory
        from where you launch ROOT.</font>&nbsp; <font size="3">Next do one of
        the following:</font></p>
        <ol>
          <li><font size="3">Startup ROOT from within the RootAnalysis directory<br>
            OR</font></li>
          <li><font size="3">Copy the .rootrc file to your local area, where you
            will startup ROOT.</font></li>
        </ol>
        <p><font size="3">Currently, our .rootrc file, does 3 important things:</font></p>
        <ol>
          <li><font size="3">Loads our current digiRootData and reconRootData
            libraries, using the rootlogon.C macro located in the RootAnalysis/setup
            directory.&nbsp; By default, the macro expects that the libraries
            are located in the RootAnalysis/lib directory.&nbsp; This behavior
            can be changed by modify the rootlogon.C macro.</font></li>
          <li><font size="3">Loads the macros defined in the RootAnalysis
            package, using the rootlogon.C macro located in the RootAnalysis/setup
            directory.</font></li>
          <li><font size="3">Using the rootalias.C macro, some useful short
            macros such as edit, ls, dir are made available within ROOT.&nbsp;
            By default, edit uses &quot;vi&quot; for UNIX and Notepad for
            Windows - you can change this by editing the RootAnalysis/setup/rootalias.C
            macro.</font></li>
        </ol>
        <h3><a name="Low level macros">Low level Utilities</a></h3>
        <p>Some low level utilities are made available in the RootAnalysis/utilityMacro
        directory.&nbsp; Each macro file contains some description of the
        macro's function and its usage.&nbsp; What follows is a summary for each
        of the macros.</p>
        <p><font size="3"><b><a name="chainTrees">chainTrees</a>.cxx</b></font></p>
        <p><font size="3">This small macro accepts a list of files names and
        returns a TChain.</font></p>
        <p><font size="3">All files must be of the same type i.e. all ntuple
        files, all raw files, all recon files, or all monte carlo files.</font></p>
        <p><font size="3">A TChain is useful if you want to analyze multiple
        files at once.&nbsp; The TChain created can then be passed to
        RootTreeAnalysis for event loop processing.</font></p>
        <p><font size="3">To run the macro, do the following:<br>
        <i>.L chainTrees.cxx<br>
     char * list[] = {<br>
       "backgndmaxpdr100000TUP0000.root",<br>
       "backgndmaxpdr100000TUP0001.root",<br>
       "backgndmaxpdr100000TUP0004.root"};<br>
     int numbFiles = sizeof(list)/sizeof(char*);<br>
     TChain* myChain = chainTrees(numbFiles,list, &quot;PDR/t1&quot;);</i></font></p>
        <p><font size="3">Where we pass into the chainTrees macro the number of
        files to process, the list of files names and the name of the Tree in
        the files.</font></p>
        <p><font size="3">The name of the Tree is determined by the type of file
        you are processing.&nbsp; If it is an ntuple file, the name will be
        &quot;PDR/t1&quot; or &quot;BFEM/t1&quot;, depending upon whether it is
        a PDR (full flight instrument) ntuple or a balloon ntuple.</font></p>
        <p><font size="3">Raw, Recon and Monte Carlo Root files have a tree
        named &quot;T&quot;.
        </font></p>
        <p><font size="3"><b><a name="createEventList.cxx">createEventList.cxx</a></b>
        </font></p>
        <p>This macro provides a generic mechanism to create a TEventList.&nbsp;
        Event lists are useful, in that they restrict the entries in a TTree
        that will be processed.&nbsp;&nbsp; A TEventList is created, by applying
        a cut on the data.&nbsp; There are 2 versions of this macro contained in
        the same file, one for a regular TFile and the other for a TChain (a
        chain of files):</p>
        <p><font size="2"><i>TEventList* createEventList(char *fileName, char *treePath, char
        *cutStr)&nbsp;<br>
        </i><b>USAGE:</b><i><br>
        </i></font><i><font size="2">    TEventList *elist =
        createEventList(&quot;myFile.root&quot;, &quot;PDR/t1&quot;, &quot;Trig_Bits > 3.0");</font></i></p>
        <p><font size="2"><i>TEventList* createEventList(TChain *chain, char *cutStr)&nbsp;<br>
        </i></font><b><font size="2">USAGE:</font></b><br>
        <i><font size="2">TEventList *elist = createEventList(myChain, "Trig_Bits > 3.0");</font></i></p>
        <p><font size="3"><b><a name="pruneTree.cxx">pruneTree.cxx</a></b></font></p>
        <p><font size="3">This macro creates a copy of a TTree containing a
        truncated eventlist based upon user supplied cuts.</font></p>
        <p><font size="2"><i>void pruneTree (char *orgFileName, char *treePath, TEventList *elist, char
        *newFileName)&nbsp;<br>
        </i><b>USAGE:</b><i><br>
    pruneTree("myOrgFile.root", "PDR/t1", elist, "myNewFile.root");<br>
        </i></font></p>
        <p><i><font size="2">void pruneTree (int numFiles, char* list[], char* treePath. TCut cut, char
        *newFileName)&nbsp;</font></i></p>
        <p><b><a name="plotMacros">plotMacros</a></b></p>
        <p>This directory contains a series of macros that create
        &quot;pretty&quot; plots from the histograms generated by the
        RootTreeAnalysis macro.&nbsp;</p>
        <p><b><a name="HistBatch.h">HistBatch.h</a></b><br>
        A very useful macro in this directory is HistBatch.h.&nbsp; This
        contains a new class, created by Dan Flath, that can generate plots from
        a Histogram ROOT file and print them to the screen and/or to a
        Postscript file.&nbsp; The following describes the 3 main routines in
        this class:</p>
        <p><i><font size="2">//! Draw all histograms (if in memory) contained in
        list<br>
        static void drawAll(const TList *l, const char *szFileName, const Int_t
        nCols = 1, const Int_t nRows = 1) const;</font></i></p>
        <p><i><font size="2">//! Draw all histograms (if in memory) contained in
        directory (does not recurse sub-TDirectories)<br>
        static void drawAll(const TDirectory *d, const char *szFileName, const
        Int_t nCols = 1, const Int_t nRows = 1) const;</font></i></p>
        <p><i><font size="2">//! Draw all histograms (from disk) contained in
        file (recurses sub-TDirectories)<br>
        static void drawAll(const char *szInFileName, const char *szFileName,
        const Int_t nCols = 1, const Int_t nRows = 1) const;</font></i></p>
        <p><b>Usage</b></p>
        <p>All methods are public static.&nbsp; No instance of the HistBatch
        must be created in order to call the functions.&nbsp; Treat the
        functions as if they belong to a namespace called HistBatch.&nbsp; ie:</p>
        <p><i><font size="2">HistBatch::drawAll(myList, &quot;myPsFile.ps&quot;,
        2, 2);&nbsp;&nbsp; // Draw all histos in myList to myPsFile.ps in 2x2
        orientation</font></i></p>
        <p>Here is a description of the other macros in the plotMacros
        directory.</p>
        <p><b>acdPlots.cxx </b>creates plots of PHA values for the ACD and XGTs,
        using the histrogram ROOT file generated by the RootTreeAnalysis macro.&nbsp;
        Usage:<br>
        <i><font size="2">.L acdPlots.cxx<br>
        acdPlots(&quot;Histograms.root&quot;, &quot;myNewPSfile.ps&quot;);</font></i></p>
        <p><b>epsfilecreator</b> plots histograms one per pad and creates eps files for
        every of them as selected or commented out by the user (Recon data) The sequence can be followed to create more histos as the user needs
        them.</p>
        <p><b><font size="3">hit4layers </font></b> plots 4 histograms of 4 different HIT Layers, selected by
        the user, in one pad. It outputs a ps file with the result (Raw data).</p>
        <p><b>hitlayers</b> loops over ALL Hit Layers pltting in one pad (Raw data).&nbsp;
        It outputs a ps file with the result (Raw data).</p>
        <p><b>hitstrips</b> loops over all layers plotting hits per strip
        histogrmas. It creates a ps file with the result (Raw data).</p>
        <p><b>reconhistograms</b> plots all recon histograms created in RootTreeAnalysis
        and creates a single ps file in several pages</p>
        <p><b>totmap</b> loops over all layers plotting tot and creating a ps file with
        the result (Raw data).</p>
        <h3><a name="Event Loop processing">Event Loop processing</a></h3>
        <p><font size="3"><b><a name="RootTreeAnalysis">RootTreeAnalysis</a></b></font></p>
        <p><font size="3">Our generic event loop macro.&nbsp; Handles raw,
        reconstruction, and/or monte carlo ROOT files.&nbsp; Output is a new
        ROOT file, named Histograms.root, which contains a series of user
        defined histograms.&nbsp; Users can provide
        either file names, or TChains of files for multi-file processing.</font></p>
        <p><font size="3">Use the RootTreeAnalysis constructor to pass in file
        names or a TChain of files.</font></p>
        <p><font size="3">Event Processing is done by calling <i>RootTreeAnalysis::Go(Int_t</i>
        <i>numEvents);</i>&nbsp; This causes the next numEvents events to be
        processed - filling the defined histograms.&nbsp; Note:&nbsp; this does
        not cause the histograms to be saved!!!</font></p>
        <p><font size="3">You may use the pre-defined histograms provided or
        modify/add histograms.&nbsp; Users define their histograms in the <i>HistDefine</i>
        routine, located in the RootTreeAnalysis.cxx file.&nbsp; Note that there
        are separate functions for Raw, Recon, and MC ntuples.</font></p>
        <p><font size="3">Example usage:<br>
        </font><i><font size="2">RootTreeAnalysis* m = new RootTreeAnalysis("myRawFile.root", "myReconFile.root"); // create RootTreeAnalysis object<br>
  m->Go(500);      // loop over 500 events. Go contains your analysis code<br>
        m-&gt;StartWithEvent(1001); // set the file pointer to eventNum = 1001<br>
        m-&gt;Go(50); // process the next 50 events starting from eventNum 1001<br>
        m-&gt;HistClear(); // clear all histograms<br>
        m-&gt;Go(1000); // Process the next 1000 events, starting from eventNum
        1052<br>
        delete m; // deletes the object and causes the Histogram file to be
        written</font></i></p>
        <p><font size="3"><b><a name="RawValidate">RawValidate</a></b></font></p>
        <p><font size="3">Handles only raw ROOT files.&nbsp; Behaves just as
        RootTreeAnalysis does, but it contains some additional default
        histograms that are useful for making sure that the raw data looks
        reasonable.</font></p>
        <p><font size="3">Event Processing is done by calling <i>RawValidate::Go(Int_t</i>
        <i>numEvents);</i>&nbsp; This causes the next numEvents events to be
        processed - filling the defined histograms.&nbsp; Note:&nbsp; this does
        not cause the histograms to be saved!!!</font></p>
        <p><font size="3">You may use the pre-defined histograms provided or
        modify/add histograms.&nbsp; Users define their histograms in the <i>HistDefine</i>
        routine, located in the RawValidate.cxx file.&nbsp;&nbsp;</font></p>
        <p>Example usage:<font size="2"><i><br>
        </i></font><i><font size="2">RawValidate* m = new RawValidate("MyRootFile.root"); // create RawValidate object<br>
      m->Go(500);      // loop over 500 events. Go contains your analysis code<br>
        m-&gt;StartWithEvent(2001); // set the file pointer to eventNum = 2001<br>
        m-&gt;Go(50); // process the next 50 events<br>
        m-&gt;HistClear(); // clear all histograms<br>
        m-&gt;Go(1000);<br>
        delete m;</font></i></p>
        <p><font size="3"><b><a name="NtupleAnalysis">NtupleAnalysis</a></b></font></p>
        <p><font size="3">Please <a href="http://www-glast.slac.stanford.edu/software/root/howto/pdr.html">see
        this page</a> for a description... But here is a summary:</font></p>
        <p><font size="3">This class handles any ntuple file, and produces an
        output PostScript file containing plots of any and all entries in the
        ntuple - and can apply an optional cut to the data as well before
        creating the plots.&nbsp; One can pre-set the number of columns and rows
        of the PS pages as well - to determine how many plots to display per
        page.</font></p>
        <p><font size="3"><b>USAGE:</b><br>
        </font><i><font size="2">NtupleAnalysis *m = new NtupleAnalysis( );<br>
        m-&gt;openRootFile(&quot;myNtupleFile.root&quot;, &quot;PDR/t1&quot;);
        // you supply a file name, and the name (and path if necessary) of the
        TTree in the file.<br>
        m-&gt;setNumRows(4);<br>
        m-&gt;setNumCols(4);</font></i><font size="2"><i><br>
        m-&gt;drawAllPlots(&quot;myNewPSFile.ps&quot;, &quot;TKR_NO_TRACKS &gt;
        0&quot;); // creates the PS file - and applies the cut to the data</i></font></p>
        <h3><a name="Ancillary Data files">Ancillary Data files</a></h3>
        <p><font size="3"><b><a name="Calibration">Calibration</a></b></font></p>
        <p>This directory contains pedestal files from both the 1999-2000 SLAC
        test beam and the 2001 Balloon Flight.&nbsp; Be aware of the type of
        data you are processing.&nbsp; </p>
        <p>Run208Ped.h is pedestal data for the CAL from the 1999-2000 SLAC test
        beam.</p>
        <p>The other pedestal files are for the 2001 Balloon Flight:<br>
        bfem_peds_cal.dat, bfem_peds_acd.dat, bfem_peds_xgt.dat</p>
        <p>Currently by default, the RootTreeAnalysis and RawValidate macros
        will read in and use the Balloon pedestal files.</p>
      </td>
    </tr>
  </table>
  </center>
</div>

</body>

</html>
