<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>RootAnalysis</title>
</head>

<body>

<div align="center">
  <center>
  <table border="0" cellpadding="0" cellspacing="8" width="98%">
    <tr>
      <td align="right" valign="top" width="20%">&nbsp;</td>
      <td width="15"></td>
      <td valign="bottom" width="80%"><font size="5"><b>RootAnalysis</b></font></td>
    </tr>
    <tr>
      <td valign="top" width="20%"><font size="2"><strong><a href="#Introduction">Introduction</a></strong></font>
        <p><font size="2"><strong><a href="#Setup">Setup</a>&nbsp;<br>
        <a href="#CMT">Using CMT</a></strong></font></p>
        <p><font size="2"><strong><a href="#Event Loop processing">Event Loop
        Processing</a></strong></font><font size="3"><br>
        </font><font size="2"><a href="#RootTreeAnalysis">RootTreeAnalysis</a>
        <a href="#RawValidate"><br>
        </a><a href="#NtupleAnalysis">NtupleAnalysis</a></font></p>
        <p><font size="2"><strong><a href="#Low level macros">Low Level Utilties</a></strong></font><font size="4"><br>
        </font><font size="2"><a href="#chainTrees">chainTrees.cxx<br>
        </a><a href="#chainAll">chainAll.cxx</a><br>
        <a href="#copyTree">copyTree.cxx</a><a href="#createEventList.cxx"><br>
        createEventList.cxx</a><br>
        <a href="#pruneTree.cxx">pruneTree.cxx</a></font></p>
        <p><font size="2">
        <a href="#plotMacros"><b>plotMacros<br>
        </b></a><a href="#HistBatch.h">HistBatch</a></font></p>
      </td>
      <td width="15"></td>
      <td valign="top" width="80%">
        <h3><a name="Introduction">Introduction</a></h3>
        <p><font size="3">This package contains all GLAST ROOT macros that are
        supported by the GLAST ground software group.&nbsp; The routines
        provided, are meant to provide some basic, general, functions that most
        GLAST ROOT users may find useful.&nbsp; To process GLAST ROOT data,
        it is not necessary to use this package, but it may make it easier.</font></p>
        <h3><font size="3"><a name="Setup">Setup the ROOT environment for GLAST</a></font></h3>
        <p><font size="3">RootAnalysis now comes with a simple .rootrc.&nbsp;
        This is the file used by ROOT to setup your ROOT environment upon
        startup.&nbsp;&nbsp;But first you must setup a <b> <i> ROOTANALYSIS</i></b> environment variable that is
        set to the directory path, where you have the RootAnalysis package
        installed.&nbsp;</font></p>
        <p><font size="3">On UNIX:&nbsp; <i><b>setenv ROOTANALYSIS $HOME/RootAnalysis/v<sub>n</sub>r<sub>m</sub></b></i></font></p>
        <p><font size="3">On Windows:&nbsp;</font></p>
        <ol>
          <li><font size="3">In Control Panel, Click on System,&nbsp;</font></li>
          <li><font size="3">Then Click on the Environment tab</font></li>
          <li><font size="3">Then define a new variable called <i><b> ROOTANALYSIS</b></i><br>
            Set its value equal to the RootAnalysis directory on your system,
            i.e. D:/glast/RootAnalysis/v2r2</font></li>
        </ol>
        <p><font size="3">To be use the RootAnalysis package, <b> the .rootrc file must be in the directory
        from where you launch ROOT.</b></font>&nbsp; <font size="3">Next do one of
        the following:</font></p>
        <ol>
          <li><font size="3">Startup ROOT from within the RootAnalysis/v<sub>n</sub>r<sub>m</sub> directory<br>
            OR</font></li>
          <li><font size="3">Copy the .rootrc file to your local area, where you
            will startup ROOT.</font></li>
        </ol>
        <p><font size="3">Currently, our .rootrc file, does 3 important things:</font></p>
        <ol>
          <li><font size="3">Loads our current mcRootData, digiRootData, reconRootData
            libraries, using the rootlogon.C macro located in the RootAnalysis/setup
            directory.&nbsp; By default, the macro expects that the libraries
            are located in the RootAnalysis/lib directory.&nbsp; This behavior
            can be changed by modifying the rootlogon.C macro.</font></li>
          <li><font size="3">Loads the macros defined in the RootAnalysis
            package, using the rootlogon.C macro located in the RootAnalysis/setup
            directory.</font></li>
          <li><font size="3">Using the rootalias.C macro, some useful short
            macros such as edit, ls, dir are made available within ROOT.&nbsp;
            By default, edit uses &quot;vi&quot; for UNIX and Notepad for
            Windows - you can change this by editing the RootAnalysis/setup/rootalias.C
            macro.</font></li>
        </ol>
        <h3><a name="CMT">Using RootAnalysis as a regular CMT package</a></h3>
        <p>It is also possible to download RootAnalysis directly from the CVS
        repository.&nbsp; In this case, you must make sure to also install the
        mcRootData, digiRootData, and reconRootData packages on your system, as the compiled
        libraries will not be downloaded when using CVS.&nbsp; In this case, the
        RootAnalysis environment variable will be set up for you.&nbsp; Follow
        the typical directions for setup using CMT:<br>
        <a href="http://www-glast.slac.stanford.edu/software/CodeHowTo/">http://www-glast.slac.stanford.edu/software/CodeHowTo/</a></p>
        <h3><a name="Event Loop processing">Event Loop processing</a></h3>
        <p><font size="3"><b><a name="RootTreeAnalysis">RootTreeAnalysis</a></b></font></p>
        <p><font size="3">Our generic event loop macro.&nbsp; Handles digi,
        reconstruction, and/or monte carlo ROOT files.&nbsp; Output is a new
        ROOT file, named Histograms.root, which contains a series of user
        defined histograms.&nbsp; Users can provide
        either file names, or TChains of files for multi-file processing.</font></p>
        <p><font size="3">Event Processing is done by calling <i>RootTreeAnalysis::Go(Int_t</i>
        <i>numEvents);</i>&nbsp; This causes the next <i> numEvents</i> events to be
        processed - filling the defined histograms.&nbsp; Note:&nbsp; this does
        not cause the histograms to be saved!!!&nbsp; One must call <i>RootTreeAnalysis::WriteHist(
        )</i>.</font></p>
        <p><font size="3">The actual analysis is performed in a series of
        routines called by <i>Go( ).&nbsp; </i>The routines that handle the digi
        data are named:&nbsp; <i>DigiTkr( ), DigiCal( ),</i> and <i>DigiAcd( )</i>.&nbsp;
        Similarly, the reconstruction functions are:&nbsp; <i>ReconTkr( )</i>
        and <i>ReconCal( )</i>.&nbsp; When adding your own analysis - you may
        add it directly to the <i>Go( )</i> function - or you may prefer to
        extend one of the existing analysis routines that specifically handles
        the type of data you are accessing.</font></p>
        <p><font size="3">You may use the pre-defined histograms provided or
        modify/add/remove histograms.&nbsp; Users define their histograms in the <i>HistDefine</i>
        routine, located in the RootTreeAnalysis.cxx file.&nbsp; Note that there
        are separate functions for Digi, Recon, and MC histograms.</font></p>
        <p><font size="3">Example usage:<br>
        </font><i><font size="2">RootTreeAnalysis m(&quot;myDigiFile.root&quot;,
        &quot;myReconFile.root&quot;); // opens our files<br>
        m.Go(500);      // loop over 500 events. Go contains your analysis code<br>
        m.StartWithEvent(1001); // set the file pointer to eventNum = 1001<br>
        m.Go(50); // process the next 50 events starting from eventNum 1001<br>
        m.HistClear(); // clear all histograms<br>
        m.Go(1000); // Process the next 1000 events, starting from eventNum
        1052<br>
        m.WriteHist(); // Write out all hisgtograms to the Histograms.root file</font></i></p>
        <p><font size="3"><b><a name="NtupleAnalysis">NtupleAnalysis</a></b></font></p>
        <p><font size="3">Please <a href="http://www-glast.slac.stanford.edu/software/root/howto/pdr.html">see
        this page</a> for a description... But here is a summary:</font></p>
        <p><font size="3">This class handles any ntuple file, and produces an
        output PostScript file containing plots of any and all entries in the
        ntuple - and can apply an optional cut to the data as well before
        creating the plots.&nbsp; One can pre-set the number of columns and rows
        of the PS pages as well - to determine how many plots to display per
        page.</font></p>
        <p><font size="3"><b>USAGE:</b><br>
        </font><i><font size="2">NtupleAnalysis m( );<br>
        m.openRootFile(&quot;myNtupleFile.root&quot;, &quot;PDR/t1&quot;);
        // you supply a file name, and the name (and path if necessary) of the
        TTree in the file.<br>
        m.setNumRows(4);<br>
        m.setNumCols(4);</font></i><font size="2"><i><br>
        m.drawAllPlots(&quot;myNewPSFile.ps&quot;, &quot;TKR_NO_TRACKS &gt;
        0&quot;); // creates the PS file - and applies the cut to the data</i></font></p>
        <h3><a name="Low level macros">Low level Utilities</a></h3>
        <p>Some low level utilities are made available in the RootAnalysis/utilityMacro
        directory.&nbsp; Each macro file contains some description of the
        macro's function and its usage.&nbsp; What follows is a summary for each
        of the macros.</p>
        <p><font size="3"><b><a name="chainTrees">chainTrees</a>.cxx</b></font></p>
        <p><font size="3">This small macro accepts a list of files names, the
        path and name of the TTree and
        returns a TChain.</font></p>
        <p><font size="3">All files must contain TTrees of the same type i.e. ntuple,
        raw, recon, or Monte Carlo.</font></p>
        <p><font size="3">A TChain is useful if you want to analyze multiple
        files at once.&nbsp; The TChain created can then be passed to
        RootTreeAnalysis for event loop processing.</font></p>
        <p><font size="3">Here is an example:<i><br>
     char * list[] = {<br>
       "backgndmaxpdr100000TUP0000.root",<br>
       "backgndmaxpdr100000TUP0001.root",<br>
       "backgndmaxpdr100000TUP0004.root"};<br>
     int numbFiles = sizeof(list)/sizeof(char*);<br>
     TChain* myChain = chainTrees(numbFiles,list, &quot;t1&quot;);</i></font></p>
        <p><font size="3">Where we pass into the chainTrees macro the number of
        files to process, the list of files names and the name of the Tree in
        the files.</font></p>
        <p><font size="3">The name of the Tree is determined by the type of file
        you are processing.&nbsp;</font></p>
        <p><font size="3"><b><a name="chainAll">chainAll.cxx</a></b></font></p>
        <p><font size="3">Similar to chainTrees, this macro chains all Trees
        located in ROOT files in a specified directory.&nbsp; ROOT files are
        identified by having the *.root extension - this macro will ignore all
        other files.&nbsp;&nbsp;</font></p>
        <p>chainAll is declared as:<br>
        <i><font size="2">TChain* chainAll(char* dir, char* treePath)&nbsp;</font><br>
        </i>where the user specifies:<br>
        The name of a directory containing ROOT files<br>
        The path and name of the TTree in those ROOT files.</p>
        <p><font size="3">Here is an example:<br>
        <i>TChain *myChain = chainAll(&quot;C:/rootfiles/&quot;, &quot;t1&quot;);</i></font></p>
        <p><font size="3">Remember that all chained TTrees must be of the same
        type:&nbsp; ntuple, digi, recon, monte carlo, etc...</font></p>
        <p><font size="3"><b><a name="copyTree">copyTree.cxx</a></b></font></p>
        <p><font size="3">Copies a TTree from one file into a new file, allowing
        for a new directory to be created to store the TTree in the new file.</font></p>
        <p>copyTree is declared as:<br>
        <font size="2"><i>void copyTree(char *orgFileName, char *newFileName, char *newDir, char
        *treeName)<br>
        </i></font><font size="3">Where the user provides:<br>
        </font>N<font size="3">ame of the original ROOT file<br>
        New ROOT file name<br>
        Directory in which to store the copy of the TTree<br>
        The path and name of the TTree to copy</font></p>
        <p><font size="3">Here is an example:<br>
        </font><i><font size="2">copyTree(&quot;myOrgRootFile.root&quot;, &quot;myNewRootFile.root&quot;,
        &quot;myNewDir&quot;, &quot;T&quot;);</font></i></p>
        <p><font size="3"><b><a name="createEventList.cxx">createEventList.cxx</a></b>
        </font></p>
        <p>This macro provides a generic mechanism to create a ROOT TEventList.&nbsp;
        Event lists are useful, in that they can be used to restrict the entries in a TTree
        that will be processed.&nbsp;&nbsp; A TEventList is created, by applying
        a cut on the data.&nbsp; There are 2 versions of this macro contained in
        the same file, one for a regular TFile and the other for a TChain (a
        chain of files):</p>
        <p><font size="2"><i>TEventList* createEventList(char *fileName, char *treePath, char
        *cutStr)&nbsp;<br>
        </i><b>USAGE:</b><i><br>
        </i></font><i><font size="2">    TEventList *elist =
        createEventList(&quot;myFile.root&quot;, &quot;PDR/t1&quot;, &quot;Trig_Bits > 3.0");</font></i></p>
        <p><font size="2"><i>TEventList* createEventList(TChain *chain, char *cutStr)&nbsp;<br>
        </i></font><b><font size="2">USAGE:</font></b><br>
        <i><font size="2">TEventList *elist = createEventList(myChain, "Trig_Bits > 3.0");</font></i></p>
        <p><font size="3"><b><a name="pruneTree.cxx">pruneTree.cxx</a></b></font></p>
        <p><font size="3">This macro creates a copy of a TTree containing a
        truncated eventlist based upon user supplied cuts.</font></p>
        <p><font size="2"><i>void pruneTree (char *orgFileName, char *treePath, TEventList *elist, char
        *newFileName)&nbsp;<br>
        </i><b>USAGE:</b><i><br>
    pruneTree("myOrgFile.root", "PDR/t1", elist, &quot;myNewFile.root&quot;);
        </i></font></p>
        <p><i><font size="2">void pruneTree (int numFiles, char* list[], char* treePath. TCut cut, char
        *newFileName)&nbsp;</font></i></p>
        <p><b><a name="plotMacros">plotMacros</a></b></p>
        <p>This directory contains a series of macros that create
        &quot;pretty&quot; plots from the histograms generated by the
        RootTreeAnalysis macro.&nbsp;</p>
        <p><b><a name="HistBatch.h">HistBatch.h</a></b><br>
        A very useful macro in this directory is HistBatch.h.&nbsp; This
        contains a new class, created by Dan Flath, that can generate plots from
        a Histogram ROOT file and print them to the screen and/or to a
        Postscript file.&nbsp; The following describes the 3 main routines in
        this class:</p>
        <p><i><font size="2">//! Draw all histograms (if in memory) contained in
        list<br>
        static void drawAll(const TList *l, const char *szFileName, const Int_t
        nCols = 1, const Int_t nRows = 1) const;</font></i></p>
        <p><i><font size="2">//! Draw all histograms (if in memory) contained in
        directory (does not recurse sub-TDirectories)<br>
        static void drawAll(const TDirectory *d, const char *szFileName, const
        Int_t nCols = 1, const Int_t nRows = 1) const;</font></i></p>
        <p><i><font size="2">//! Draw all histograms (from disk) contained in
        file (recurses sub-TDirectories)<br>
        static void drawAll(const char *szInFileName, const char *szFileName,
        const Int_t nCols = 1, const Int_t nRows = 1) const;</font></i></p>
        <p><b>Usage</b></p>
        <p>All methods are public static.&nbsp; No instance of the HistBatch
        must be created in order to call the functions.&nbsp; Treat the
        functions as if they belong to a namespace called HistBatch.&nbsp; ie:</p>
        <p><i><font size="2">HistBatch::drawAll(myList, &quot;myPsFile.ps&quot;,
        2, 2);&nbsp;&nbsp; // Draw all histos in myList to myPsFile.ps in 2x2
        orientation</font></i></p>
        <p>Here is a description of the other macros in the plotMacros
        directory.</p>
        <p><b>acdPlots.cxx </b>creates plots of PHA values for the ACD and XGTs,
        using the histrogram ROOT file generated by the RootTreeAnalysis macro.&nbsp;
        Usage:<br>
        <i><font size="2">.L acdPlots.cxx<br>
        acdPlots(&quot;Histograms.root&quot;, &quot;myNewPSfile.ps&quot;);</font></i></p>
        <p><b><font size="3">hit4layers </font></b> plots 4 histograms of 4 different HIT Layers, selected by
        the user, in one pad. It outputs a ps file with the result (Raw data).</p>
        <p><b>hitlayers</b> loops over ALL Hit Layers pltting in one pad (Raw data).&nbsp;
        It outputs a ps file with the result (Raw data).</p>
        <p><b>hitstrips</b> loops over all layers plotting hits per strip
        histogrmas. It creates a ps file with the result (Raw data).</p>
        <p><b>reconhistograms</b> plots all recon histograms created in RootTreeAnalysis
        and creates a single ps file in several pages</p>
        <p><b>totmap</b> loops over all layers plotting tot and creating a ps file with
        the result (Raw data).</p>
      </td>
    </tr>
  </table>
  </center>
</div>

</body>

</html>
