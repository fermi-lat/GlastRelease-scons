
#ifndef TABLELIST_H
#define TABLELIST_H

#include "fx.h"

#include "FXCheckList.h"

#include "rdbModel/Management/Visitor.h"
#include "rdbModel/Rdb.h"
#include "rdbModel/Tables/Table.h"
#include "rdbModel/Tables/Assertion.h"
#include "rdbModel/Tables/Column.h"


class TableColumnList: public FXVerticalFrame, public rdbModel::Visitor
{
  FXDECLARE(TableColumnList)
 public:
  enum{
    ID_TBLLIST=FXVerticalFrame::ID_LAST,
    ID_COLLIST
  }; 

  TableColumnList(FXComposite *, FXObject *target = NULL, FXSelector sel = 0);

  long onSelectTable(FXObject*, FXSelector, void*);
  long onCheckColumn(FXObject*, FXSelector, void*);
  long onUncheckColumn(FXObject*, FXSelector, void*);
  long onCmdMenuPane(FXObject*, FXSelector, void*);
  
  const FXCheckList* getColList() const {return m_colList;}
  const FXList* getTableList() const {return m_tblList;}
  
  void reset();
  
 protected:
  TableColumnList(){}
  TableColumnList(TableColumnList&){} 
  
 private:
 
  FXObject* m_target;                                // Target of the messages generated by TableColumnList
  FXSelector m_selector;                            // ID sent to the taget
  FXList *m_tblList;                                // List of database tables
  FXCheckList *m_colList;                           // List of comlumns for the selected table
  FXMenuPane *m_colListPop;                         // Pop-up menù to select or deselect multiple columns
  bool m_tableSelected;                             // True if a table has been selected 
  
  
  /// Visitors to build the table and column lists  
  rdbModel::Visitor::VisitorState visitRdb(rdbModel::Rdb *rdb);
  rdbModel::Visitor::VisitorState visitTable(rdbModel::Table *table);
  rdbModel::Visitor::VisitorState visitColumn(rdbModel::Column *column);
  rdbModel::Visitor::VisitorState visitIndex(rdbModel::Index *index);
  rdbModel::Visitor::VisitorState visitAssertion(rdbModel::Assertion *assertion);
  
};


#endif
