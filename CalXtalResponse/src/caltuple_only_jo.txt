//
// Job Option file for readigi_runrecon:
// Read in a digi Root file and run recon on it!
//
// $Header$
//
// Things to be changed by the user can
// be found at the end of the file!
//

//
// Primary DLLs, including auditor:
//
ApplicationMgr.DLLs += {"GaudiAlg",
"GaudiAud"};

//
// Set up basic event loop:
//
ApplicationMgr.DLLs += {"GlastSvc"};
ApplicationMgr.ExtSvc = {"EventSelector/EventSelector" ,

"EventCnvSvc"};

EventPersistencySvc.CnvServices = {"EventCnvSvc"};
EventSelector.Input = "NONE";

EventSelector.Input = "SVC='DbEvtSelector'";
EventSelector.PrintFreq = -1;

//
// A structure for the topalg, using sequencer steps:
//
ApplicationMgr.TopAlg = {"Sequencer/Top"};

//
// Define the top sequence loop:
//
Top.Members = {"Sequencer/Digitization",

"Sequencer/Output"};

//
// Digitization sequence: Read in digis from a ROOT file
//
Digitization.Members = {"digiRootReaderAlg"};

//
// CAL Xtal response:
//
ApplicationMgr.DLLs += {"CalXtalResponse"};

//
// Reconstruction:
//
ApplicationMgr.DLLs += {"CalibSvc"};
//
// Define the output sequence:
//
Output.Members += {"CalTupleAlg"};
//
// Start up a CalibDataSvc:
//

ApplicationMgr.ExtSvc += {"CalibDataSvc"};

ApplicationMgr.ExtSvc += {"CalibMySQLCnvSvc", "CalibXmlCnvSvc" };

DetectorPersistencySvc.CnvServices += {"CalibMySQLCnvSvc"};


//
// Name of calibration database:
//
CalibMySQLCnvSvc.DbName = "calib";

DetectorPersistencySvc.CnvServices += {"CalibXmlCnvSvc"};


//
// Instrument name: LAT for inside the grid,
// TkrFMx:CalFMxxx for single bay
//
CalibDataSvc.CalibInstrumentName = "LAT";

// Storage type of 14 corresponds to MYSQL:
CalibDataSvc.CalibStorageType = 14;

CalibDataSvc.CalibRootName = "Calib";

// Get time from data:
CalibDataSvc.CalibTimeSource = "data";

// Start up a CalCalibSvc:
ApplicationMgr.ExtSvc += {"CalCalibSvc"};

// Cal flavor:
CalCalibSvc.DefaultFlavor = "ideal";


//
// For TKR Root calibration files:
//
ApplicationMgr.ExtSvc += {"CalibRootCnvSvc"};
DetectorPersistencySvc.CnvServices += {"CalibRootCnvSvc"};


//
// Tracker flavor:
//
TkrCalibAlg.calibFlavor = "ideal";

//
// Write out bad and hot strips to the log file:
//
TkrBadStripsSvc.OutputLevel = 2;


// Start up an AcdCalibSvc:
ApplicationMgr.DLLs += {"AcdUtil"};
ApplicationMgr.ExtSvc += {"AcdCalibSvc"};

// For real data:
AcdCalibSvc.DefaultFlavor = "ideal";


//
// General calibration flavor list:
//
CalibDataSvc.CalibFlavorList = {"ideal"};

//
// Merit and AnalysisNtuple:
//
ApplicationMgr.DLLs += {"ntupleWriterSvc"};
ApplicationMgr.ExtSvc += {"RootTupleSvc"};

//
// Always fill ntuples:
//
RootTupleSvc.RejectIfBad = false;

//
// Root IO:
//
ApplicationMgr.DLLs += {"RootIo"};
ApplicationMgr.ExtSvc += {"RootIoSvc"};

//
// Must use RootIo as executable, not Gaudi event loop!
//
ApplicationMgr.Runable = "RootIoSvc";

//
// The following things can be changed by the user:
//

//
// Set output level threshold:
// 2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL
//
MessageSvc.OutputLevel = 3;

//
// Number of events:
//
ApplicationMgr.EvtMax = 1000000000;
//
// Name of input digi Root file:
//
digiRootReaderAlg.digiRootFile =
"/nfs/farm/g/glast/u37/BeamTest06/rootData/700001951/v6r0919p1/digi/digitization-latte-v1r030604p2_700001951_digi_DIGI.root";

//
// Name of output CAL ntuple:
//
CalTupleAlg.tupleFilename = "700001951_caltuple.root";
//
// The Doors .....
//
